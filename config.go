package cagent

import (
	"bufio"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	btoml "github.com/BurntSushi/toml"
	"github.com/pelletier/go-toml"
	log "github.com/sirupsen/logrus"
)

var DefaultCfgPath string

var configAutogeneratedHeadline = []byte(
	`# This is an auto-generated config to connect with the cloudradar service
# To see all options of cagent run cagent -p
`)

type MinValuableConfig struct {
	HubURL      string `toml:"hub_url" comment:"# HTTP url to connect with HUB"`
	HubUser     string `toml:"hub_user" comment:"# "`
	HubPassword string `toml:"hub_password" comment:"# "`
}

type Cagent struct {
	Interval float64 `toml:"interval" comment:"# interval to push metrics to the HUB"`

	PidFile  string   `toml:"pid" comment:"# pid file location"`
	LogFile  string   `toml:"log,omitempty" required:"false" comment:"log file location"`
	LogLevel LogLevel `toml:"log_level" comment:"# \"debug\", \"info\", \"error\" verbose level; can be overriden with -v flag"`

	// not nesting MinValuableConfig here as it will created entry with name MinValuableConfig when marshaling
	HubURL           string `toml:"hub_url" comment:"# HTTP url to connect with HUB"`
	HubUser          string `toml:"hub_user" comment:"# \n"`
	HubPassword      string `toml:"hub_password" comment:"# \n"`
	HubGzip          bool   `toml:"hub_gzip" comment:"# enable gzip when sending results to the HUB"`
	HubProxy         string `toml:"hub_proxy" comment:"# "`
	HubProxyUser     string `toml:"hub_proxy_user" comment:"# "`
	HubProxyPassword string `toml:"hub_proxy_password" comment:"# "`

	CPULoadDataGather []string `toml:"cpu_load_data_gathering_mode" comment:"# default ['avg1']"`
	CPUUtilDataGather []string `toml:"cpu_utilisation_gathering_mode" comment:"# default ['avg1']"`
	CPUUtilTypes      []string `toml:"cpu_utilisation_types" comment:"# default ['user','system','idle','iowait']"`

	FSTypeInclude []string `toml:"fs_type_include" comment:"# default ['ext3','ext4','xfs','jfs','ntfs','btrfs','hfs','apfs','fat32']"`
	FSPathExclude []string `toml:"fs_path_exclude" comment:"# default []"`
	FSMetrics     []string `toml:"fs_metrics" comment:"# default ['free_B','free_percent','total_B']"`

	NetInterfaceExclude             []string `toml:"net_interface_exclude" comment:"# "`
	NetInterfaceExcludeRegex        []string `toml:"net_interface_exclude_regex" comment:"# default [], default on windows: [\"Pseudo-Interface\"]"`
	NetInterfaceExcludeDisconnected bool     `toml:"net_interface_exclude_disconnected" comment:"# default true"`
	NetInterfaceExcludeLoopback     bool     `toml:"net_interface_exclude_loopback" comment:"# default true"`

	NetMetrics []string `toml:"net_metrics" comment:"# default['in_B_per_s', 'out_B_per_s']"`

	SystemFields []string `toml:"system_fields" comment:"# default ['uname','os_kernel','os_family','os_arch','cpu_model','fqdn','memory_total_B']"`

	WindowsUpdatesWatcherInterval int `toml:"windows_updates_watcher_interval" comment:"# default 3600"`

	// internal use
	hubHttpClient *http.Client

	rootCAs *x509.CertPool
	version string
}

func New() *Cagent {
	var defaultLogPath string
	var rootCertsPath string

	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	exPath := filepath.Dir(ex)

	switch runtime.GOOS {
	case "windows":
		DefaultCfgPath = filepath.Join(exPath, "./cagent.conf")
		defaultLogPath = filepath.Join(exPath, "./cagent.log")
	case "darwin":
		DefaultCfgPath = os.Getenv("HOME") + "/.cagent/cagent.conf"
		defaultLogPath = os.Getenv("HOME") + "/.cagent/cagent.log"
	default:
		rootCertsPath = "/etc/cagent/cacert.pem"
		DefaultCfgPath = "/etc/cagent/cagent.conf"
		defaultLogPath = "/var/log/cagent/cagent.log"
	}

	ca := &Cagent{
		LogFile:                         defaultLogPath,
		Interval:                        90,
		CPULoadDataGather:               []string{"avg1"},
		CPUUtilTypes:                    []string{"user", "system", "idle", "iowait"},
		CPUUtilDataGather:               []string{"avg1"},
		FSTypeInclude:                   []string{"ext3", "ext4", "xfs", "jfs", "ntfs", "btrfs", "hfs", "apfs", "fat32"},
		FSMetrics:                       []string{"free_B", "free_percent", "total_B"},
		NetMetrics:                      []string{"in_B_per_s", "out_B_per_s"},
		NetInterfaceExcludeDisconnected: true,
		NetInterfaceExclude:             []string{},
		NetInterfaceExcludeRegex:        []string{},
		NetInterfaceExcludeLoopback:     true,
		SystemFields:                    []string{"uname", "os_kernel", "os_family", "os_arch", "cpu_model", "fqdn", "memory_total_B"},
	}

	if runtime.GOOS == "windows" {
		ca.WindowsUpdatesWatcherInterval = 3600
		ca.NetInterfaceExcludeRegex = []string{"Pseudo-Interface"}
		ca.CPULoadDataGather = []string{}
		ca.CPUUtilTypes = []string{"user", "system", "idle"}
	}

	if rootCertsPath != "" {
		if _, err := os.Stat(rootCertsPath); err == nil {
			certPool := x509.NewCertPool()

			b, err := ioutil.ReadFile(rootCertsPath)
			if err != nil {
				log.Error("Failed to read cacert.pem: ", err.Error())
			} else {
				ok := certPool.AppendCertsFromPEM(b)
				if ok {
					ca.rootCAs = certPool
				}
			}
		}
	}

	ca.lookupEnv()

	return ca
}

func secToDuration(secs float64) time.Duration {
	return time.Duration(int64(float64(time.Second) * secs))
}

func (ca *Cagent) lookupEnv() {
	if val, ok := os.LookupEnv("CAGENT_HUB_URL"); ok {
		ca.HubURL = val
	}

	if val, ok := os.LookupEnv("CAGENT_HUB_USER"); ok {
		ca.HubUser = val
	}

	if val, ok := os.LookupEnv("CAGENT_HUB_PASSWORD"); ok {
		ca.HubPassword = val
	}
}

func (ca *Cagent) SetVersion(version string) {
	ca.version = version
}

func (ca *Cagent) userAgent() string {
	if ca.version == "" {
		ca.version = "{undefined}"
	}
	parts := strings.Split(ca.version, "-")

	return fmt.Sprintf("Cagent v%s %s %s", parts[0], runtime.GOOS, runtime.GOARCH)
}

func (ca *Cagent) DumpConfigToml() string {
	buf, err := toml.Marshal(*ca)
	if err != nil {
		log.Errorf("DumpConfigToml error: %s", err.Error())
	}

	return string(buf)
}

func (ca *Cagent) ReadConfigFromFile(configFilePath string, createIfNotExists bool) error {
	dir := filepath.Dir(configFilePath)
	err := os.MkdirAll(dir, 0755)
	if err != nil {
		log.WithError(err).Errorf("Failed to create the config dir: '%s'", dir)
	}

	_, configExists := os.Stat(configFilePath)

	var f *os.File
	if f, err = os.OpenFile(configFilePath, os.O_RDWR|os.O_CREATE, 0644); err != nil {
		// err is *os.PathError type and has all information about path and failure
		return err
	}

	defer func() {
		if err = f.Close(); err != nil {
			log.WithError(err).Errorf("failed to close config file %s", configFilePath)
		}
	}()

	if os.IsNotExist(configExists) {
		if !createIfNotExists {
			return fmt.Errorf("config file not exists: %s", configFilePath)
		}

		ca.lookupEnv()

		var buf []byte
		if buf, err = toml.Marshal(&MinValuableConfig{
			HubURL:      ca.HubURL,
			HubUser:     ca.HubUser,
			HubPassword: ca.HubPassword,
		}); err != nil {
			return err
		}

		writer := bufio.NewWriter(f)
		if _, err = writer.Write(configAutogeneratedHeadline); err != nil {
			log.Errorf("writing config %s + %s", configFilePath, err.Error())
		} else {
			if _, err = writer.Write(buf); err != nil {
				log.Errorf("writing config %s + %s", configFilePath, err.Error())
			}
		}

		if err = writer.Flush(); err != nil {
			log.Errorf("writing config %s + %s", configFilePath, err.Error())
		} else {
			log.Infof("generated minimum valuable config: %s", configFilePath)
		}
	} else if configExists == nil {
		// todo(troian) replace with toml.Unmarshal when https://github.com/pelletier/go-toml/issues/252 fixed
		//  for now github.com/pelletier/go-toml completely overrides default values even if they omitted in the file

		_, err = btoml.DecodeFile(configFilePath, &ca)
		if err != nil {
			return err
		}

		ca.lookupEnv()
	} else {
		return err
	}

	if ca.HubProxy != "" {
		if !strings.HasPrefix(ca.HubProxy, "http") {
			ca.HubProxy = "http://" + ca.HubProxy
		}
		_, err := url.Parse(ca.HubProxy)

		if err != nil {
			return fmt.Errorf("failed to parse 'hub_proxy' URL")
		}
	}

	ca.SetLogLevel(ca.LogLevel)

	return addLogFileHook(ca.LogFile, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0644)
}
